{"ast":null,"code":"var _jsxFileName = \"/home/jordan/github/reaction_boilerplate/app/javascript/components/dashboard/BoardsDashboardContainer.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions/BoardActions\";\nimport BoardsDashboard from \"./BoardsDashboard\";\nimport Popover from \"../shared/Popover\";\nimport NewBoardFormContainer from \"./NewBoardFormContainer\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    boards: state.boards\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchBoards: function onFetchBoards() {\n      dispatch(actions.fetchBoards());\n    }\n  };\n};\n\nvar BoardsDashboardContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(BoardsDashboardContainer, _React$Component);\n\n  var _super = _createSuper(BoardsDashboardContainer);\n\n  function BoardsDashboardContainer() {\n    var _this;\n\n    _classCallCheck(this, BoardsDashboardContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      popover: {\n        visible: false,\n        attachedTo: null,\n        type: null\n      }\n    };\n\n    _this.handleNewBoardClick = function (e) {\n      _this.setState({\n        popover: {\n          visible: true,\n          attachedTo: e.currentTarget,\n          type: \"new-board\"\n        }\n      });\n    };\n\n    _this.handleClosePopoverClick = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        popover: {\n          visible: false,\n          attachedTo: null,\n          type: null\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoardsDashboardContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onFetchBoards();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(BoardsDashboard, {\n        boards: this.props.boards,\n        onNewBoardClick: this.handleNewBoardClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Popover, Object.assign({}, this.state.popover, {\n        coverTarget: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(NewBoardFormContainer, {\n        onCloseClick: this.handleClosePopoverClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return BoardsDashboardContainer;\n}(React.Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardsDashboardContainer);","map":{"version":3,"sources":["/home/jordan/github/reaction_boilerplate/app/javascript/components/dashboard/BoardsDashboardContainer.jsx"],"names":["React","connect","actions","BoardsDashboard","Popover","NewBoardFormContainer","mapStateToProps","state","boards","mapDispatchToProps","dispatch","onFetchBoards","fetchBoards","BoardsDashboardContainer","popover","visible","attachedTo","type","handleNewBoardClick","e","setState","currentTarget","handleClosePopoverClick","preventDefault","props","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,4BAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLC,IAAAA,MAAM,EAAED,KAAK,CAACC;AADT,GAAP;AAGD,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLC,IAAAA,aAAa,EAAE,yBAAM;AACnBD,MAAAA,QAAQ,CAACR,OAAO,CAACU,WAAR,EAAD,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;IAQMC,wB;;;;;;;;;;;;;;;UACJN,K,GAAQ;AACNO,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,KADF;AAEPC,QAAAA,UAAU,EAAE,IAFL;AAGPC,QAAAA,IAAI,EAAE;AAHC;AADH,K;;UAURC,mB,GAAsB,UAAAC,CAAC,EAAI;AACzB,YAAKC,QAAL,CAAc;AACZN,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE,IADF;AAEPC,UAAAA,UAAU,EAAEG,CAAC,CAACE,aAFP;AAGPJ,UAAAA,IAAI,EAAE;AAHC;AADG,OAAd;AAOD,K;;UAEDK,uB,GAA0B,UAAAH,CAAC,EAAI;AAC7BA,MAAAA,CAAC,CAACI,cAAF;;AAEA,YAAKH,QAAL,CAAc;AACZN,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE,KADF;AAEPC,UAAAA,UAAU,EAAE,IAFL;AAGPC,UAAAA,IAAI,EAAE;AAHC;AADG,OAAd;AAOD,K;;;;;;;wCAvBmB;AAClB,WAAKO,KAAL,CAAWb,aAAX;AACD;;;6BAuBQ;AACP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,eAAD;AACE,QAAA,MAAM,EAAE,KAAKa,KAAL,CAAWhB,MADrB;AAEE,QAAA,eAAe,EAAE,KAAKU,mBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAKE,oBAAC,OAAD,oBAAa,KAAKX,KAAL,CAAWO,OAAxB;AAAiC,QAAA,WAAW,EAAE,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACE,oBAAC,qBAAD;AAAuB,QAAA,YAAY,EAAE,KAAKQ,uBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALF,CADF;AAWD;;;;EA7CoCtB,KAAK,CAACyB,S;;AAgD7C,eAAexB,OAAO,CACpBK,eADoB,EAEpBG,kBAFoB,CAAP,CAGbI,wBAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions/BoardActions\";\nimport BoardsDashboard from \"./BoardsDashboard\";\nimport Popover from \"../shared/Popover\";\nimport NewBoardFormContainer from \"./NewBoardFormContainer\";\n\nconst mapStateToProps = state => {\n  return {\n    boards: state.boards\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchBoards: () => {\n      dispatch(actions.fetchBoards());\n    }\n  };\n};\n\nclass BoardsDashboardContainer extends React.Component {\n  state = {\n    popover: {\n      visible: false,\n      attachedTo: null,\n      type: null\n    }\n  };\n  componentDidMount() {\n    this.props.onFetchBoards();\n  }\n  handleNewBoardClick = e => {\n    this.setState({\n      popover: {\n        visible: true,\n        attachedTo: e.currentTarget,\n        type: \"new-board\"\n      }\n    });\n  };\n\n  handleClosePopoverClick = e => {\n    e.preventDefault();\n\n    this.setState({\n      popover: {\n        visible: false,\n        attachedTo: null,\n        type: null\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <BoardsDashboard\n          boards={this.props.boards}\n          onNewBoardClick={this.handleNewBoardClick}\n        />\n        <Popover {...this.state.popover} coverTarget={true}>\n          <NewBoardFormContainer onCloseClick={this.handleClosePopoverClick} />\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BoardsDashboardContainer);\n"]},"metadata":{},"sourceType":"module"}